import speech_recognition as sr
import pyttsx3
import google.generativeai as genai

# ‚úÖ Configure Gemini with your API key
genai.configure(api_key="AIzaSyD1Qfvs-HwNgwR1llWuzIZmje_7TRzbVaY")

# Load Gemini model
model = genai.GenerativeModel("gemini-1.5-pro")

# Initialize recognizer and TTS engine
recognizer = sr.Recognizer()
engine = pyttsx3.init()

def speak(text):
    """Convert text to speech"""
    engine.say(text)
    engine.runAndWait()

def listen():
    """Listen from microphone and return recognized speech as text"""
    with sr.Microphone() as source:
        print("üé§ Listening...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

    try:
        query = recognizer.recognize_google(audio)
        print("üëâ You said:", query)
        return query
    except sr.UnknownValueError:
        print("‚ùå Sorry, I didn‚Äôt understand that.")
        return None
    except sr.RequestError:
        print("‚ö†Ô∏è Speech Recognition service is unavailable.")
        return None

def ai_response(query):
    """Send user query to Gemini and return AI response"""
    try:
        response = model.generate_content(query)
        return response.text
    except Exception as e:
        return f"Error from Gemini API: {e}"

def main():
    """Main loop for the AI Assistant"""
    speak("Hello, I am your Gemini AI assistant. How can I help you today?")
    while True:
        query = listen()
        if query:
            if "exit" in query.lower() or "quit" in query.lower():
                speak("Goodbye! Have a nice day.")
                break
            answer = ai_response(query)
            print("ü§ñ Assistant:", answer)
            speak(answer)

if __name__ == "__main__":
    main()
